package ventanas;

import controller.FacturaController;
import java.awt.Color;
import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import modelobd.Articulo;
import modelobd.Cliente;
import modelobd.VFactura;
import modelobd.Vendedor;
import modelogui.ModeloDetalleVentaArticulo;
import modelogui.ModeloTablaArticulo;
import utilidades.ExaminadorCampos;
import utilidades.Helper;

/**
 *
 * @author El APRENDIZ www.elaprendiz.net63.net
 */
public class JFacturas1 extends javax.swing.JInternalFrame {

    /**
     * Creates new form JFacturas
     */
    ModeloTablaArticulo mta;
    ModeloDetalleVentaArticulo mdva;
    private VFactura factura;
    private Articulo art;
    private FacturaController fc = new FacturaController();
    private Cliente cliente;
    private Vendedor vendedor;
    private int cancelado = -1;
    private double subTotal = 0.0;
    private double descuento = 0.0;
    private double iva = 0.0;
    private double total = 0.0; 
    private int posicionRegistro = 0;
    public JFacturas1() {
        initComponents();        
        factura = fc.getUltimaFactura();
        if (factura ==  null) {
            mdva = new ModeloDetalleVentaArticulo(fc,"0000000001");
            
        }else{
            mdva = new ModeloDetalleVentaArticulo(fc,factura.getNumeroFactura());
        }
          
        tblProductos.setModel(mdva);
        tblProductos.setRowSelectionAllowed(true);
        tblProductos.setAutoscrolls(true);
        posicionRegistro = fc.getNumFacturas();
        cargarDatos();
        cargarEventos();        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 394, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 274, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bntRClientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntRClientesActionPerformed
       PanelVistaCliente pvc = new PanelVistaCliente();
       JLabel aviso = new JLabel("Doble click para seleccionar");
        aviso.setEnabled(false); 
        aviso.setOpaque(true);
        JOptionPane.showInternalOptionDialog(this, pvc, "Seleccione un Cliente",JOptionPane.OK_CANCEL_OPTION,
                                            JOptionPane.QUESTION_MESSAGE, null, new Object[]{aviso},null);
      if(pvc.getCl() != null){
          setCliente(pvc.getCl());
      }
    }//GEN-LAST:event_bntRClientesActionPerformed

    private void bntAgregarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntAgregarProductoActionPerformed
        PanelVistaArticulo pva = new PanelVistaArticulo();
        JLabel aviso = new JLabel("Doble click para seleccionar");
        aviso.setEnabled(false);        
        JOptionPane.showInternalOptionDialog(this, pva, "Seleccione un producto",JOptionPane.OK_CANCEL_OPTION,
                                            JOptionPane.QUESTION_MESSAGE, null, new Object[]{aviso},null);
       if(pva.getAr() != null)
       {
           art = pva.getAr();
           setArticulo();
       }
    }//GEN-LAST:event_bntAgregarProductoActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
       AdministradorVentanas.mostrarVentanaCliente(this.getDesktopPane());
    }//GEN-LAST:event_jButton7ActionPerformed

    private void bntNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntNuevoActionPerformed
        ExaminadorCampos.habilitarComponentes(pnlBotonesPrincipal, true, true,ExaminadorCampos.TIPO_HABILITAR_POR_NOMBRE);
        ExaminadorCampos.habilitarComponentes(pnlBotonesEdicion, true, true,ExaminadorCampos.TIPO_HABILITAR_POR_NOMBRE);
        ExaminadorCampos.limpiarTexto(pnlEntradas, true,"");
        ExaminadorCampos.limpiarTexto(pnlCantidades, true,"0.0");
        bntRClientes.setEnabled(true);        
        txtNumFactura.setText(Helper.generarCodigo(fc.getUltimoID(), null));       
        cancelado = 0;
        txtPorcentajeDescuento.setText("0");  
        ExaminadorCampos.habilitarComponentes(jPanel3, true, false,ExaminadorCampos.TIPO_HABILITAR_TODO);
        mdva.limpiar();             
        
    }//GEN-LAST:event_bntNuevoActionPerformed

    private void bntCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntCancelarActionPerformed
        ExaminadorCampos.habilitarComponentes(pnlBotonesPrincipal, true, false,ExaminadorCampos.TIPO_HABILITAR_POR_NOMBRE);
        ExaminadorCampos.habilitarComponentes(pnlBotonesEdicion, true, false,ExaminadorCampos.TIPO_HABILITAR_TODO);
        bntSalir.setEnabled(true);
        bntRClientes.setEnabled(false);
        factura = fc.getUltimaFactura();        
        mdva = new ModeloDetalleVentaArticulo(fc,factura.getNumeroFactura());
       EventQueue.invokeLater(new Runnable(){

            @Override
            public void run() {
               bntQuitar.setEnabled(false);
               bntModificarCantidad.setEnabled(false);
            }
        })  ;
        tblProductos.setModel(mdva);
        cancelado = 1;
         ExaminadorCampos.habilitarComponentes(jPanel3, true, true,ExaminadorCampos.TIPO_HABILITAR_TODO);
        cargarDatos();
    }//GEN-LAST:event_bntCancelarActionPerformed

    private void tblProductosFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tblProductosFocusLost
        if(cancelado == 0)
        {
            bntModificarCantidad.setEnabled(true); 
            bntQuitar.setEnabled(true);
        }            
    }//GEN-LAST:event_tblProductosFocusLost

    
    public void setCliente(Cliente cl)
    {
        cliente = cl;
        txtCliente.setText(cl.toString());
        txtDireccion.setText(cl.getDireccion());
        txtRuc.setText(cl.getRuc());
        txtTelefono.setText(cl.getTelefono());
    }
    
    public void setArticulo(){
        
        if(art != null)
        {
            if(mdva.existe(art))
            {
                JOptionPane.showInternalMessageDialog(this, "Este producto ya fue agregado.");
                int fl = mdva.getIndice(art);                             
                tblProductos.setRowSelectionInterval(fl, fl);                
                return;
            }
            PanelCantidadArticulo pca = new PanelCantidadArticulo(art);
            JButton[] opciones = pca.getButtons();
            JOptionPane.showInternalOptionDialog(this, pca, "INGRESE LA CANTIDAD QUE DESEA DE ESTE PRODUCTO",JOptionPane.OK_CANCEL_OPTION,
                                                JOptionPane.QUESTION_MESSAGE, null, opciones, opciones[0]);

            if(pca.getOpcion() == 1)
            {
                if(pca.getFacturaDetalle() == null)
                {
                    System.out.println("Factura detalle nula");
                }
                pca.getFacturaDetalle().setNumeroFactura(txtNumFactura.getText());
                System.out.println(pca.getFacturaDetalle().getArticulo().getDescripcion());
                mdva.agregar(pca.getFacturaDetalle());
                calcularValores();
            }
        }         
       
    }
    
    private void calcularValores()
    {
        subTotal = mdva.getSubtotal();
        descuento = (subTotal*Integer.parseInt(txtPorcentajeDescuento.getText()))/100;
        iva = (subTotal-descuento)*0.12;
        total = subTotal-descuento+iva; 
        this.txtDescuento.setText(String.valueOf(descuento));
        this.txtIva.setText(String.valueOf(iva));
        this.txtSubtotal.setText(String.valueOf(subTotal));
        this.txtTotal.setText(String.valueOf(total));
            
    }
    
    private void cargarDatos()
    {
        if(factura != null)
        {
            this.txtNumFactura.setText(factura.getNumeroFactura());
            txtCliente.setText(factura.getCliente().toString());
            txtDireccion.setText(factura.getCliente().getDireccion());
            txtRuc.setText(factura.getCliente().getRuc());
            txtTelefono.setText(factura.getCliente().getTelefono());            
            cmbVendedor.setSelectedItem(factura.getVendedor());
            this.cmbFormaPago.setSelectedItem(factura.getTipoDePago());
            this.txtPorcentajeDescuento.setText(factura.getDescuento().toString());
            this.txtAreaObservacion.setText(factura.getObservacion());
            this.txtDescuento.setText(factura.getTotalDescuento().toString());
            this.txtIva.setText(factura.getTotalIva().toString());
            this.txtSubtotal.setText(factura.getSubTotal().toString());
            this.txtTotal.setText(String.valueOf((factura.getSubTotal()-factura.getTotalDescuento()+factura.getTotalIva())));
            this.txtPagoInicial.setText(factura.getPagoInicial().toString());
            this.txtSaldo.setText(String.valueOf((factura.getPagoInicial()-(factura.getSubTotal()-factura.getTotalDescuento()+factura.getTotalIva()))));
            this.dcFechaEmision.setDate(factura.getFecha());            
        } 
        
    }
    
    private void cargarEventos()
    {
         ActionListener moodCantidad = new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                cambiarCantidadPrd(e);
            }
        };
        bntModificarCantidad.addActionListener(moodCantidad);
        ActionListener quitarProducto = new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                eliminarArticulo(e);
            }
        };
        
        bntQuitar.addActionListener(quitarProducto);
        
        ItemListener il = new ItemListener(){

            @Override
            public void itemStateChanged(ItemEvent e) {
                vendedor = (Vendedor)e.getItem();
            }
        };
        
        cmbVendedor.addItemListener(il);
        
        ActionListener grabar = new ActionListener(){

            @Override
            public void actionPerformed(ActionEvent e) {
                grabarFactura(e);
            }
        };
        this.bntguardar.addActionListener(grabar);
        
        ActionListener eliminar = new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                eliminarFactura();
            }
        };
        
        this.bntEliminar.addActionListener(eliminar);
        
        ActionListener buscar = new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                buscarFactura();
            }
        };
        
        this.bntBuscar.addActionListener(buscar);
                
         ActionListener siguie = new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                 siguienteRegistro();
            }
        };
         
         this.bntSig.addActionListener(siguie);
         
         ActionListener anterior = new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
               registroAnterior();
                
            }
        };
        
        this.bntAnterior.addActionListener(anterior);
        
        ActionListener ultimo = new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                 EventQueue.invokeLater(new Runnable(){
                    @Override
                    public void run() {
                       getRegistroFinal();
                    }
                });
                
            }
        };
        
        this.bntUltimo.addActionListener(ultimo);
        
        ActionListener primero = new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                 EventQueue.invokeLater(new Runnable(){
                    @Override
                    public void run() {
                       getPrimerRegistro();
                    }
                });
                
            }
        };
        
        this.bntPrimero.addActionListener(primero);
        ListSelectionListener lsl = new ListSelectionListener(){
            @Override
            public void valueChanged(ListSelectionEvent e) {               
                if(cancelado == 0)
                {
                   ExaminadorCampos.habilitarComponentes(pnlBotonesEdicion, false, true,ExaminadorCampos.TIPO_HABILITAR_POR_NOMBRE); 
                }
            }
        };
        
        
        tblProductos.getSelectionModel().addListSelectionListener(lsl);
        
        ActionListener guardarImprimir = new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                Integer nu = grabarFactura(e);
                if(nu != null)
                {
                    prepararImpresion();
                }
                
            }
        };
        
        this.bntGuardaImprimir.addActionListener(guardarImprimir);
        
        ActionListener initCalculadora = new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                  iniciarCalculadora();            
            }
        };
       this.bntCalculladora.addActionListener(initCalculadora);
       
       ActionListener cerrar = new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                  cerrarVentana();            
            }
        };
       
       this.bntSalir.addActionListener(cerrar);
    }
    
    public void cerrarVentana()
    {
        this.dispose();
    }
    public void prepararImpresion()
    {
        PanelImprimible pca = new PanelImprimible(mdva,factura);
            JButton[] opciones = pca.getButtons();
            JOptionPane.showInternalOptionDialog(this, pca, "Imprimir Factura",JOptionPane.OK_CANCEL_OPTION,
                                                JOptionPane.QUESTION_MESSAGE, null, opciones, opciones[0]);

            if(pca.getOpcion() != null)
            {
                pca.Imprimir();
            }
    }
    
    public void siguienteRegistro()
    {
         
        if(posicionRegistro >= fc.getNumFacturas()) 
        {
            bntSig.setEnabled(false);            
            return;
        }
                
        factura = fc.getPaginadorFactura(posicionRegistro, 1, true);        
        mdva = new ModeloDetalleVentaArticulo(fc,factura.getNumeroFactura());
        tblProductos.setModel(mdva);
        this.cargarDatos();
         System.out.println(posicionRegistro);
        bntAnterior.setEnabled(true);
       
        posicionRegistro++;
    }
    
    public void registroAnterior()
    {
        if(posicionRegistro == 0) 
        {
            bntAnterior.setEnabled(false);
            return;
        }
        if(posicionRegistro == fc.getNumFacturas())
        {
            posicionRegistro -=2;
        }else
        {
           posicionRegistro--; 
        }
         
        factura = fc.getPaginadorFactura(posicionRegistro, 1, true);  
        mdva = new ModeloDetalleVentaArticulo(fc,factura.getNumeroFactura());
        tblProductos.setModel(mdva);
        this.cargarDatos();
        bntSig.setEnabled(true);
        System.out.println( posicionRegistro);
       
    }
    
    public void getRegistroFinal()
    {
        factura = fc.getUltimaFactura();
        mdva = new ModeloDetalleVentaArticulo(fc,factura.getNumeroFactura());
        tblProductos.setModel(mdva);
        this.cargarDatos();
        bntSig.setEnabled(false);
        bntAnterior.setEnabled(true);
        posicionRegistro = fc.getNumFacturas();
    }
    
    public void getPrimerRegistro()
    {
        factura = fc.getPaginadorFactura(0, 1, true);
        mdva = new ModeloDetalleVentaArticulo(fc,factura.getNumeroFactura());
        tblProductos.setModel(mdva);
        this.cargarDatos();
        bntAnterior.setEnabled(false);
        bntSig.setEnabled(true);
        posicionRegistro = 1;
    }
    
    
    public void buscarFactura()
    {
        PanelVistaFactura pva = new PanelVistaFactura();
            JLabel lbl = new JLabel("NO HA SELECCIONADO NINGUNA FACTURA");
            lbl.setForeground(Color.red);
            lbl.setVisible(false);
            pva.setAviso(lbl);
            JOptionPane.showInternalOptionDialog(this, pva, "Busquedad de Facturas",JOptionPane.OK_CANCEL_OPTION,
                                                JOptionPane.QUESTION_MESSAGE, null, new JLabel[]{lbl}, null);
        if(pva.getFactura() != null)    
        {
            factura = pva.getFactura();        
            mdva = new ModeloDetalleVentaArticulo(fc,factura.getNumeroFactura());
            tblProductos.setModel(mdva);
            this.cargarDatos();
        }

    }
    public void eliminarFactura()
    {
        String numFac = factura.getNumeroFactura();
        int opcion = JOptionPane.showInternalConfirmDialog(this,"¿Realmente desea eliminar "
                + "la Factura Nro: "+numFac+"?",
                "Factura: "+numFac, JOptionPane.YES_NO_CANCEL_OPTION);
       if(opcion == JOptionPane.OK_OPTION)
       {
            int eliminarRegistro = fc.eliminarRegistro(factura.getNumeroFactura());
            if(eliminarRegistro == 1)
            {
                JOptionPane.showInternalMessageDialog(this, "La Factura Nro. "+numFac+" ha sido eliminada");
                factura = fc.getUltimaFactura();        
                mdva = new ModeloDetalleVentaArticulo(fc,factura.getNumeroFactura());
                tblProductos.setModel(mdva);        
                cargarDatos();
            }
       }
        
    }
    public synchronized Integer grabarFactura(ActionEvent e)
    {
        if(cliente == null)
        {
           mostrarMensaje("Seleccione un cliente"); 
           return null;
        }
         if(vendedor == null)
         {
             mostrarMensaje("Seleccione un Vendedor"); 
             return null;
         }else{
             if(vendedor.getId() == null)
             {
                 mostrarMensaje("Seleccione un Vendedor");
                 return null;
             }
         }
         
         if(mdva.estaVacio())
         {
            mostrarMensaje("Antes de grabar debe agregar por lo menos un articulo");
            return null; 
         }
         
         if(this.cmbFormaPago.getSelectedIndex()!=-1)
         {
             if(this.cmbFormaPago.getSelectedIndex() == 0)
             {
                 mostrarMensaje("Especifique una forma de pago");
                 return null;
             }
         }
         
         if(this.cmbFormaPago.getSelectedIndex()==-1)
         {             
            mostrarMensaje("Especifique una forma de pago");
            cmbFormaPago.requestFocus();
            return null;
         }
         
         factura = new VFactura();
         factura.setNumeroFactura(this.txtNumFactura.getText());
         factura.setCliente(cliente);
         factura.setVendedor(vendedor);
         factura.setTipoDePago(cmbFormaPago.getSelectedItem().toString());
         factura.setFecha(dcFechaEmision.getDate());
         factura.setDescuento(Integer.parseInt(txtPorcentajeDescuento.getText()));
         factura.setTotalDescuento(descuento);
         factura.setSubTotal(subTotal);
         factura.setTotalIva(iva);
         factura.setPagoInicial(total);
         factura.setObservacion(this.txtAreaObservacion.getText());         
         
         int opcion = JOptionPane.showInternalConfirmDialog(this, "¿Realmente desea "
                 + "guardar esta factura?", "Factura Nro: "+txtNumFactura.getText(), JOptionPane.YES_NO_CANCEL_OPTION);
         if(opcion==JOptionPane.OK_OPTION)
         {
             int grabado = fc.grabarRegistro(factura,mdva.getLista());
             if(grabado != 0)
             {
                 JOptionPane.showInternalMessageDialog(this, "Factura Nro: "+txtNumFactura.getText()+
                         "Ha sido procesada correctamente.");
                 return new Integer(1);
             }
         }
         
         return null;
    }
    
    private synchronized void mostrarMensaje(String msg)
    {
        JOptionPane.showInternalMessageDialog(this, msg);
    }
    
    public JFacturas1 getCnt()
    {
        return this;
    }
    
    public synchronized void cambiarCantidadPrd(ActionEvent ev)
    {
        if(tblProductos.getSelectedRow() != -1)
        {
            
            //JOptionPane.showInternalInputDialog(getCnt(), "Ingrese Nueva Cantidad", "Cambio de Cantidad", JOptionPane.YES_NO_CANCEL_OPTION);
            PanelCantidadArticulo pca = new PanelCantidadArticulo(mdva.getFila(tblProductos.getSelectedRow()));
            JButton[] opciones = pca.getButtons();
            JOptionPane.showInternalOptionDialog(this, pca, "INGRESE LA CANTIDAD QUE DESEA DE ESTE PRODUCTO",JOptionPane.OK_CANCEL_OPTION,
                                                JOptionPane.QUESTION_MESSAGE, null, opciones, opciones[0]);

            if(pca.getOpcion() == 1)
            {
                if(pca.getFacturaDetalle() == null)
                {
                    System.out.println("Factura detalle nula");
                }               
                System.out.println(pca.getFacturaDetalle().getArticulo().getDescripcion());
                mdva.actualizarFila(tblProductos.getSelectedRow());
                calcularValores();
            }
        }else{
            JOptionPane.showInternalMessageDialog(this, "Primero debe seleccionar un articulo!!");
        }
    }
    
    public synchronized void eliminarArticulo(ActionEvent ev)
    {
        if(tblProductos.getSelectedRow() != -1)
        {
            int opcion = JOptionPane.showConfirmDialog(this, "¿Realmente desea quitar el Articulo:\n"
                    +"Codigo: "+mdva.getFila(tblProductos.getSelectedRow()).getIdArticulo()+"\n"+
                    "Nombre: "+mdva.getFila(tblProductos.getSelectedRow()).getArticulo().getDescripcion()+
                    "?", "Desea quitar el Articulo", JOptionPane.YES_NO_CANCEL_OPTION);
            if(opcion == JOptionPane.OK_OPTION)
            {
                mdva.eliminarFila(tblProductos.getSelectedRow());
                calcularValores();
                if(tblProductos.getRowCount() == 0)
                {
                    this.bntModificarCantidad.setEnabled(false);
                    this.bntQuitar.setEnabled(false);
                }
            }
            
        }else{
            JOptionPane.showInternalMessageDialog(this, "Primerod debe seleccionar un articulo!!");
        }
    }
    
    public void iniciarCalculadora()
    {
        Runtime r=Runtime.getRuntime();
        try
        {
          Process p=r.exec("calc");           
        }catch(Exception e){}
    }
    private javax.swing.JButton bntAgregarProducto;
    private javax.swing.JButton bntAnterior;
    private javax.swing.JButton bntBuscar;
    private javax.swing.JButton bntCalculladora;
    private javax.swing.JButton bntCancelar;
    private javax.swing.JButton bntEliminar;
    private javax.swing.JButton bntGuardaImprimir;
    private javax.swing.JButton bntModificarCantidad;
    private javax.swing.JButton bntNuevo;
    private javax.swing.JButton bntPrimero;
    private javax.swing.JButton bntQuitar;
    private javax.swing.JButton bntRClientes;
    private javax.swing.JButton bntSalir;
    private javax.swing.JButton bntSig;
    private javax.swing.JButton bntUltimo;
    private javax.swing.JButton bntguardar;
    private javax.swing.JComboBox cmbFormaPago;
    private javax.swing.JComboBox cmbVendedor;
    private com.toedter.calendar.JDateChooser dcFechaEmision;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPanel pnlBotonesEdicion;
    private javax.swing.JPanel pnlBotonesPrincipal;
    private javax.swing.JPanel pnlCantidades;
    private javax.swing.JPanel pnlEntradas;
    private javax.swing.JPanel pnlEntradas1;
    private javax.swing.JPanel pnlEntradas2;
    private javax.swing.JTable tblProductos;
    private javax.swing.JTextArea txtAreaObservacion;
    private javax.swing.JTextField txtCliente;
    private javax.swing.JTextField txtDescuento;
    private javax.swing.JTextField txtDireccion;
    private javax.swing.JTextField txtIva;
    private javax.swing.JTextField txtNumFactura;
    private javax.swing.JTextField txtPagoInicial;
    private javax.swing.JTextField txtPorcentajeDescuento;
    private javax.swing.JTextField txtRuc;
    private javax.swing.JTextField txtSaldo;
    private javax.swing.JTextField txtSubtotal;
    private javax.swing.JTextField txtTelefono;
    private javax.swing.JTextField txtTotal;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
